# -*- coding: utf-8 -*-
"""Diabetes Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18AS4fOTKfNCCLbN8-Fuz4Cqbx1Ylaukp
"""

# Python
# ML Algorith : support vector machine(SVM)

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Dta collection and analysis"""

# loading dataset in pandas dataframe

diabetes_dataset =pd.read_csv('/content/diabetes_new.csv')

#pd.read_csv?  to ckeck details of function

#Printing 1st 5 dataset
diabetes_dataset.head()

# number of rows and coloumn in dataset
diabetes_dataset.shape

# getting statistical measures of data

diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

"""Label 0= Non diabetic
Label 1 = diabetic
"""

diabetes_dataset.groupby('Outcome').mean()

# separating data and labels

X= diabetes_dataset.drop(columns='Outcome', axis=1)
Y=diabetes_dataset['Outcome']

print(X)

print(Y)

"""Data Standardization"""

scaler= StandardScaler()

scaler.fit(X)

standardized_data =scaler.transform(X)

#  or directly we can use
# scaler.fit_transform : it will fit and transform data

print(standardized_data)

X= standardized_data
Y=diabetes_dataset['Outcome']

# X represent data and Y represesnt model

print(X)

print(Y)

"""Train-Test split"""

X_train ,X_test ,Y_train ,Y_test = train_test_split(X,Y, test_size=0.2 ,stratify=Y ,random_state=2)

print(X.shape ,X_train.shape ,X_test.shape)

"""Training model"""

classifier= svm.SVC(kernel='linear')

#training the support vector M.classifier
classifier.fit(X_train ,Y_train)

"""Model evaluation"""

#finding accuracy score on training data

X_train_prediction=classifier.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction ,Y_train)

print('accuracy score on training data :',training_data_accuracy )

#finding accuracy score on test data

X_test_prediction=classifier.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction ,Y_test)

print('accuracy score on test data :',test_data_accuracy )

"""Making a predictive syatem"""

input_data=(11,143,94,33,146,36.6,0.254,51)

#convert this data into numpy array

input_data_as_numpy_array=np.asarray(input_data)

# reshaping array as we are predicting for one instance

input_data_reshape = input_data_as_numpy_array.reshape(1,-1)


# standardize the i/p data

std_data=scaler.transform(input_data_reshape)
print(std_data)


predicton=classifier.predict(std_data)
print(predicton)

if (predicton[0]== 0):
  print('the person is diabeteic')
else:
  print('person is non diabeteic')